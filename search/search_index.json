{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DEVASC Associate NETCONF Intro Hands-On Lab Guide \u00b6 Overview \u00b6 What's the big fuss over IT automation? Well, more than anything, the excitement is about the sorts of things that you don't have to do when automation is on your side. Things like not having to either copy and paste configuration changes to dozens (maybe hundreds) of different systems or repeat the same click, click, click, click, click-through-the-UI marathon over, and over, and over... every single time there's a need to make a bulk change . To automate configuration and management workflows for network devices, we need to learn to write some form of automation-specific code, and the NETCONF protocol makes that possible. NETCONF provides a programmatic way to automate the network device workflows based on the predictable data structures found in YANG models. This guide will walk you through some hands-on exercises that help teach and give you a place to practice using Python to automate workflows with NETCONF . You'll get the most from these exercises if you have some familiarity with: Python fundamentals. Managing and transposing structured data between XML and Python objects. Interpreting YANG models. Unstructured vs Structured Data \u00b6 Data Meant for Humans to Read \u00b6 When we interact with the CLI of a network device, we typically send text commands and receive text responses. Usually, the responses to our commands are in plain text, in an unstructured format. We often see the raw text responses formatted with various spaces, tabs, numbering, tables, or even text-based graphics, to make the text easier for humans to read. Data Meant for Computers to Read \u00b6 When a computer, such as an automation system, tries to read that same, unstructured data, we usually have to tell the computer precisely how it needs to find the information we need. That is, we have to write some form of a search pattern, or parser , to sift through all of the spaces, special characters, and text graphics, etc., to find the specific, raw data we want. Parsing through unstructured data is often difficult to configure, temperamental to test successfully, and a headache to maintain. Plus, anytime an IT system undergoes a software or hardware change, the unstructured command response a parser expects can change, even if by a single character, and cause the parser to fail or work improperly. The NETCONF Protocol \u00b6 So, how do we automate configuration and management workflows for network devices and avoid having our lives consumed by the \"joy\" of writing and maintaining text parsers? Fortunately, the NETCONF protocol, defined in IETF RFC 6241 , allows us to use code to automate how we configure and manage network devices using open-source or OEM-proprietary structured YANG data models. Using openly available YANG models , our automation code can programmatically interact with network devices at scale because NETCONF uses XML to structure the data it sends between NETCONF clients 1 and NETCONF servers 2 . A Practical Example \u00b6 Here is an example of data returned by a network device in response to a CLI command compared with the same data returned by a network device in response to a NETCONF RPC. Now, unless you happen to be a computer, you will probably find the CLI example ( unstructured data ) a bit easier to read than the NETCONF example ( structured data ). A Side-by-Side Comparision \u00b6 Example Network Device CLI and NETCONF Response Data Even though the CLI and NETCONF data formats look drastically different, they both provide the exact same data. CLI Response Output - Unstructured Data text NETCONF Response Output - Structured Data xml Comparing the Code \u00b6 If you're thinking, \"Why would I ever want to deal with the structured data in a NETCONF RPC reply? It looks like a mess!\" Well, to put it simply, structured data in NETCONF RPCs is way easier to work with programmatically . Take a look at how we might parse both the CLI and NETCONF responses with some Python code: Example Code Exercise This exercise aims to parse the interface ID from each of the CLI and NETCONF response data sets. For reference, the correct result of a search for the interface ID is the text 1/10 . These examples assume the CLI and NETCONF data sets are already available to the Python interpreter in the variable with the name data . Even though the CLI response data is only a few lines long, the Python code to parse the interface ID from that data, with a regular expression, is lengthy and somewhat complex to read. By contrast, even though the NETCONF response data is lengthy, the Python code to parse the interface ID is short and far less complex to read. Click to view the code examples Parse the Unstructured (CLI) Response python linenums=\"1\" hl_lines=\"5-17 19 21-25\" Parsing the Structured (NETCONF) Response python linenums=\"1\" hl_lines=\"5-9\" All right, that's enough reading for now. It's time to get into the lab exercises and get some real practice. If everything to this point makes perfect sense to you, great! If not, don't worry because you're about to get plenty of hands-on repetitions with functional code. Click here to continue to the next section . NETCONF documentation often uses the terms managers and clients interchangeably to describe management workstations or servers. \u21a9 NETCONF documentation uses the terms agents , devices , and servers interchangeably to describe network devices. \u21a9","title":"Index"},{"location":"#devasc-associate-netconf-intro-hands-on-lab-guide","text":"","title":"DEVASC Associate NETCONF Intro Hands-On Lab Guide"},{"location":"#overview","text":"What's the big fuss over IT automation? Well, more than anything, the excitement is about the sorts of things that you don't have to do when automation is on your side. Things like not having to either copy and paste configuration changes to dozens (maybe hundreds) of different systems or repeat the same click, click, click, click, click-through-the-UI marathon over, and over, and over... every single time there's a need to make a bulk change . To automate configuration and management workflows for network devices, we need to learn to write some form of automation-specific code, and the NETCONF protocol makes that possible. NETCONF provides a programmatic way to automate the network device workflows based on the predictable data structures found in YANG models. This guide will walk you through some hands-on exercises that help teach and give you a place to practice using Python to automate workflows with NETCONF . You'll get the most from these exercises if you have some familiarity with: Python fundamentals. Managing and transposing structured data between XML and Python objects. Interpreting YANG models.","title":" Overview"},{"location":"#unstructured-vs-structured-data","text":"","title":" Unstructured vs Structured Data"},{"location":"#data-meant-for-humans-to-read","text":"When we interact with the CLI of a network device, we typically send text commands and receive text responses. Usually, the responses to our commands are in plain text, in an unstructured format. We often see the raw text responses formatted with various spaces, tabs, numbering, tables, or even text-based graphics, to make the text easier for humans to read.","title":"Data Meant for Humans to Read"},{"location":"#data-meant-for-computers-to-read","text":"When a computer, such as an automation system, tries to read that same, unstructured data, we usually have to tell the computer precisely how it needs to find the information we need. That is, we have to write some form of a search pattern, or parser , to sift through all of the spaces, special characters, and text graphics, etc., to find the specific, raw data we want. Parsing through unstructured data is often difficult to configure, temperamental to test successfully, and a headache to maintain. Plus, anytime an IT system undergoes a software or hardware change, the unstructured command response a parser expects can change, even if by a single character, and cause the parser to fail or work improperly.","title":"Data Meant for Computers to Read"},{"location":"#the-netconf-protocol","text":"So, how do we automate configuration and management workflows for network devices and avoid having our lives consumed by the \"joy\" of writing and maintaining text parsers? Fortunately, the NETCONF protocol, defined in IETF RFC 6241 , allows us to use code to automate how we configure and manage network devices using open-source or OEM-proprietary structured YANG data models. Using openly available YANG models , our automation code can programmatically interact with network devices at scale because NETCONF uses XML to structure the data it sends between NETCONF clients 1 and NETCONF servers 2 .","title":"The NETCONF Protocol"},{"location":"#a-practical-example","text":"Here is an example of data returned by a network device in response to a CLI command compared with the same data returned by a network device in response to a NETCONF RPC. Now, unless you happen to be a computer, you will probably find the CLI example ( unstructured data ) a bit easier to read than the NETCONF example ( structured data ).","title":" A Practical Example"},{"location":"#a-side-by-side-comparision","text":"Example Network Device CLI and NETCONF Response Data Even though the CLI and NETCONF data formats look drastically different, they both provide the exact same data. CLI Response Output - Unstructured Data text NETCONF Response Output - Structured Data xml","title":" A Side-by-Side Comparision"},{"location":"#comparing-the-code","text":"If you're thinking, \"Why would I ever want to deal with the structured data in a NETCONF RPC reply? It looks like a mess!\" Well, to put it simply, structured data in NETCONF RPCs is way easier to work with programmatically . Take a look at how we might parse both the CLI and NETCONF responses with some Python code: Example Code Exercise This exercise aims to parse the interface ID from each of the CLI and NETCONF response data sets. For reference, the correct result of a search for the interface ID is the text 1/10 . These examples assume the CLI and NETCONF data sets are already available to the Python interpreter in the variable with the name data . Even though the CLI response data is only a few lines long, the Python code to parse the interface ID from that data, with a regular expression, is lengthy and somewhat complex to read. By contrast, even though the NETCONF response data is lengthy, the Python code to parse the interface ID is short and far less complex to read. Click to view the code examples Parse the Unstructured (CLI) Response python linenums=\"1\" hl_lines=\"5-17 19 21-25\" Parsing the Structured (NETCONF) Response python linenums=\"1\" hl_lines=\"5-9\" All right, that's enough reading for now. It's time to get into the lab exercises and get some real practice. If everything to this point makes perfect sense to you, great! If not, don't worry because you're about to get plenty of hands-on repetitions with functional code. Click here to continue to the next section . NETCONF documentation often uses the terms managers and clients interchangeably to describe management workstations or servers. \u21a9 NETCONF documentation uses the terms agents , devices , and servers interchangeably to describe network devices. \u21a9","title":" Comparing the Code"},{"location":"sections/section_1/","text":"Getting Started With The Lab \u00b6 Lab Overview \u00b6 The lab environment runs in the WWT Programmability Foundations On-Demand Lab using an MDP exploration tool called YANG Suite and a web-based, interactive Python environment called JupyterLab . YANG Suite will allow you to explore YANG models and construct NETCONF RPC messages bodies using a web browser. JupyterLab will allow you to work through a series of YANG Suite tasks plus several Python-based NETCONF exercises using a web browser. Lab Requirements \u00b6 You only need a few things to start working through the labs: A computer with the Google Chrome web browser. We test access to the lab environment with Chrome, and you may experience issues with other web browsers. An account on wwt.com . Lab Setup Instructions \u00b6 The lab setup process is mostly automated although you will have to manually: launch a lab environment instance. Use a command to initiate the automated lab build. Auto-provision the hands-on environment in the WWT Programmability Foundations Lab Step 1 Launch a new copy of the WWT Programmability Foundations On-Demand Lab and click View Labs : Step 2 From the My Labs page, click Access Lab : Step 3 Click the Open in ATC Lab Gateway button : Step 4 If prompted, log on with your wwt.com Platform Account Credentials : Step 5 Click the System Tray icon and mouse over the Docker icon to reveal the service status: Attention The icon may take a minute or so to appear. Step 6 The Docker service is ready when a small exclamation point appears over the Docker icon : Attention It may be a few minutes before the Docker service is ready. Important Occasionally, the Docker Desktop service does not start on its own. Windows may ask you if you want to start the Docker service and then request permission for Net Command\u200b to run. You may safely confirm both actions. Step 7 A PowerShell script will automatically customize the lab environment, but you need to paste a long command into a PowerShell window to start that process.: Details Copy this entire command to your clipboard: Tip: move your mouse cursor over the command text and click the icon at the far right-hand side of the command block. powershell Set-Executionpolicy -Scope CurrentUser -ExecutionPolicy UnRestricted -Force; Set-Location \\Users\\admin; Invoke-WebRequest -Uri 'https://devasc-netconf.s3-us-west-2.amazonaws.com/setup_lab.ps1' -OutFile 'setup_lab.ps1\u2019; .\\setup_lab.ps1 On the Windows desktop, click the PowerShell icon in the taskbar to open a new PowerShell window. Right-click in the PowerShell window to paste the command Press your Enter or Return key to run the command. What to do if you see a 'Docker Desktop process is not running' error message: From time to time, the Windows desktop in this lab takes a lengthy amount of time to successfully start the Docker Desktop process and, rarely, Windows will fail to start Docker Desktop. If Windows cannot start Docker Desktop, your first indication will be an error message when you run the PowerShell script that configures the lab. Docker for Windows Process Status As the PowerShell error message indicates, PowerShell will attempt to start or restart the Docker Desktop process. After a few seconds, the Docker Desktop application will open behind the PowerShell window, and you may bring it to the foreground to monitor the status. A teal-colored icon in the lower-left corner of the Docker Desktop application indicates the Docker process is running and you should be able to re-run the PowerShell script to configure the lab environment. Sometimes, Windows takes 5-10 minutes to start the Docker process. An orange-colored icon in the lower-left corner of the Docker Desktop application indicates the Docker process is not running and you have a couple of options: Wait for around 10 minutes to see if Windows can start the Docker process. Launch a new instance of the WWT Programmability Foundations On-Demand Lab . Step 8 Wait a few minutes for the automated lab setup to complete: Step 9 Within a few minutes, when the lab is ready to use, a Chrome browser will open a JupyterLab URL . Open the devasc-netconf-intro folder from the navigation pane: Attention A few minutes after the JupyterLab browser window opens, a second Chrome tab will open for YANG Suite. Switch back to the JupyterLab tab when this happens. The instructions in the JupyterLab Notebook will show you how to use YANG Suite. Step 10 Next, open the lab folder: Step 11 Open the file ncclient_with_output.ipynb and follow the step-by-step instructions in the main pane: Lab Restart Instructions The lab setup process creates two shortcuts on the Windows desktop, which will help you restore the lab environment in the event the JupyterLab or YANG Suite browser tabs close, Windows restarts, etc. Notice The Restart Lab and YANG Suite shortcuts re-launch JupyterLab or YANG Suite, respectively (including the Chrome browser tabs), within a few seconds; much sooner than during the initial lab setup. Double-clicking these shortcuts will NOT cause you to lose any of your lab progress.","title":"Hands-On Lab Setup"},{"location":"sections/section_1/#getting-started-with-the-lab","text":"","title":"Getting Started With The Lab"},{"location":"sections/section_1/#lab-overview","text":"The lab environment runs in the WWT Programmability Foundations On-Demand Lab using an MDP exploration tool called YANG Suite and a web-based, interactive Python environment called JupyterLab . YANG Suite will allow you to explore YANG models and construct NETCONF RPC messages bodies using a web browser. JupyterLab will allow you to work through a series of YANG Suite tasks plus several Python-based NETCONF exercises using a web browser.","title":" Lab Overview"},{"location":"sections/section_1/#lab-requirements","text":"You only need a few things to start working through the labs: A computer with the Google Chrome web browser. We test access to the lab environment with Chrome, and you may experience issues with other web browsers. An account on wwt.com .","title":" Lab Requirements"},{"location":"sections/section_1/#lab-setup-instructions","text":"The lab setup process is mostly automated although you will have to manually: launch a lab environment instance. Use a command to initiate the automated lab build. Auto-provision the hands-on environment in the WWT Programmability Foundations Lab Step 1 Launch a new copy of the WWT Programmability Foundations On-Demand Lab and click View Labs : Step 2 From the My Labs page, click Access Lab : Step 3 Click the Open in ATC Lab Gateway button : Step 4 If prompted, log on with your wwt.com Platform Account Credentials : Step 5 Click the System Tray icon and mouse over the Docker icon to reveal the service status: Attention The icon may take a minute or so to appear. Step 6 The Docker service is ready when a small exclamation point appears over the Docker icon : Attention It may be a few minutes before the Docker service is ready. Important Occasionally, the Docker Desktop service does not start on its own. Windows may ask you if you want to start the Docker service and then request permission for Net Command\u200b to run. You may safely confirm both actions. Step 7 A PowerShell script will automatically customize the lab environment, but you need to paste a long command into a PowerShell window to start that process.: Details Copy this entire command to your clipboard: Tip: move your mouse cursor over the command text and click the icon at the far right-hand side of the command block. powershell Set-Executionpolicy -Scope CurrentUser -ExecutionPolicy UnRestricted -Force; Set-Location \\Users\\admin; Invoke-WebRequest -Uri 'https://devasc-netconf.s3-us-west-2.amazonaws.com/setup_lab.ps1' -OutFile 'setup_lab.ps1\u2019; .\\setup_lab.ps1 On the Windows desktop, click the PowerShell icon in the taskbar to open a new PowerShell window. Right-click in the PowerShell window to paste the command Press your Enter or Return key to run the command. What to do if you see a 'Docker Desktop process is not running' error message: From time to time, the Windows desktop in this lab takes a lengthy amount of time to successfully start the Docker Desktop process and, rarely, Windows will fail to start Docker Desktop. If Windows cannot start Docker Desktop, your first indication will be an error message when you run the PowerShell script that configures the lab. Docker for Windows Process Status As the PowerShell error message indicates, PowerShell will attempt to start or restart the Docker Desktop process. After a few seconds, the Docker Desktop application will open behind the PowerShell window, and you may bring it to the foreground to monitor the status. A teal-colored icon in the lower-left corner of the Docker Desktop application indicates the Docker process is running and you should be able to re-run the PowerShell script to configure the lab environment. Sometimes, Windows takes 5-10 minutes to start the Docker process. An orange-colored icon in the lower-left corner of the Docker Desktop application indicates the Docker process is not running and you have a couple of options: Wait for around 10 minutes to see if Windows can start the Docker process. Launch a new instance of the WWT Programmability Foundations On-Demand Lab . Step 8 Wait a few minutes for the automated lab setup to complete: Step 9 Within a few minutes, when the lab is ready to use, a Chrome browser will open a JupyterLab URL . Open the devasc-netconf-intro folder from the navigation pane: Attention A few minutes after the JupyterLab browser window opens, a second Chrome tab will open for YANG Suite. Switch back to the JupyterLab tab when this happens. The instructions in the JupyterLab Notebook will show you how to use YANG Suite. Step 10 Next, open the lab folder: Step 11 Open the file ncclient_with_output.ipynb and follow the step-by-step instructions in the main pane: Lab Restart Instructions The lab setup process creates two shortcuts on the Windows desktop, which will help you restore the lab environment in the event the JupyterLab or YANG Suite browser tabs close, Windows restarts, etc. Notice The Restart Lab and YANG Suite shortcuts re-launch JupyterLab or YANG Suite, respectively (including the Chrome browser tabs), within a few seconds; much sooner than during the initial lab setup. Double-clicking these shortcuts will NOT cause you to lose any of your lab progress.","title":" Lab Setup Instructions"}]}